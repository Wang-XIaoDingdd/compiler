=== Pass1Visitor(): symtab stack initialized.
[PASS1] visitExternalDeclaration: voidarithmetic(void){uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));boola=false;boolb=true;boolc=false;boold=true;boole=false;boolf=true;if(a){}elseif(b){}elseif(c){}elseif(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}}
[PASS1] visitFunctionDefinition: voidarithmetic(void){uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));boola=false;boolb=true;boolc=false;boold=true;boole=false;boolf=true;if(a){}elseif(b){}elseif(c){}elseif(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}}
[PASS1] visitDeclarationSpecifiers: void
[PASS1] visitDeclarationSpecifier: void
[PASS1] visitVoidType: void
[PASS1] visitDeclarator: arithmetic(void)
[PASS1] visitDirectDeclarator: arithmetic(void)
[PASS1] visitDirectDeclarator: arithmetic
[PASS1] visitParameterTypeList: void
[PASS1] visitParameterList: void
[PASS1] visitParameterDeclaration: void
[PASS1] visitDeclarationSpecifiers: void
[PASS1] visitDeclarationSpecifier: void
[PASS1] visitVoidType: void
[PASS1] visitCompoundStatement: {uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));boola=false;boolb=true;boolc=false;boold=true;boole=false;boolf=true;if(a){}elseif(b){}elseif(c){}elseif(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}}
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));boola=false;boolb=true;boolc=false;boold=true;boole=false;boolf=true;if(a){}elseif(b){}elseif(c){}elseif(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));boola=false;boolb=true;boolc=false;boold=true;boole=false;boolf=true;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));boola=false;boolb=true;boolc=false;boold=true;boole=false;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));boola=false;boolb=true;boolc=false;boold=true;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));boola=false;boolb=true;boolc=false;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));boola=false;boolb=true;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));boola=false;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;x-=0x1234;
[PASS1] visitBlockItemList: uint32_tx=0;x+=0x1234;
[PASS1] visitBlockItemList: uint32_tx=0;
[PASS1] visitBlockItem: uint32_tx=0;
[PASS1] visitDeclaration: uint32_tx=0;
[PASS1] visitDeclarationSpecifiers: uint32_t
[PASS1] visitDeclarationSpecifier: uint32_t
[PASS1] visitUint32_tType: uint32_t
[PASS1] visitDeclarator: x
[PASS1] visitDirectDeclarator: x
[PASS1] visitBlockItem: x+=0x1234;
[PASS1] visitStatement: x+=0x1234;
[PASS1] visitBlockItem: x-=0x1234;
[PASS1] visitStatement: x-=0x1234;
[PASS1] visitBlockItem: x/=0x1234;
[PASS1] visitStatement: x/=0x1234;
[PASS1] visitBlockItem: x*=0x1234;
[PASS1] visitStatement: x*=0x1234;
[PASS1] visitBlockItem: x^=0x1234;
[PASS1] visitStatement: x^=0x1234;
[PASS1] visitBlockItem: x~=0x1234;
[PASS1] visitStatement: x~=0x1234;
[PASS1] visitBlockItem: x|=0x1234;
[PASS1] visitStatement: x|=0x1234;
[PASS1] visitBlockItem: x&=0x1234;
[PASS1] visitStatement: x&=0x1234;
[PASS1] visitBlockItem: uint32_ty=0xFFFFFFFF;
[PASS1] visitDeclaration: uint32_ty=0xFFFFFFFF;
[PASS1] visitDeclarationSpecifiers: uint32_t
[PASS1] visitDeclarationSpecifier: uint32_t
[PASS1] visitUint32_tType: uint32_t
[PASS1] visitDeclarator: y
[PASS1] visitDirectDeclarator: y
[PASS1] visitBlockItem: y=x+9999;
[PASS1] visitStatement: y=x+9999;
[PASS1] visitBlockItem: y=x-9999;
[PASS1] visitStatement: y=x-9999;
[PASS1] visitBlockItem: y=x/9999;
[PASS1] visitStatement: y=x/9999;
[PASS1] visitBlockItem: y=x*9999;
[PASS1] visitStatement: y=x*9999;
[PASS1] visitBlockItem: y=x^9999;
[PASS1] visitStatement: y=x^9999;
[PASS1] visitBlockItem: y=x|9999;
[PASS1] visitStatement: y=x|9999;
[PASS1] visitBlockItem: y=x&9999;
[PASS1] visitStatement: y=x&9999;
[PASS1] visitBlockItem: uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));
[PASS1] visitDeclaration: uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));
[PASS1] visitDeclarationSpecifiers: uint32_t
[PASS1] visitDeclarationSpecifier: uint32_t
[PASS1] visitUint32_tType: uint32_t
[PASS1] visitDeclarator: z
[PASS1] visitDirectDeclarator: z
[PASS1] visitBlockItem: boola=false;
[PASS1] visitDeclaration: boola=false;
[PASS1] visitDeclarationSpecifiers: bool
[PASS1] visitDeclarationSpecifier: bool
[PASS1] visitBoolType: bool
[PASS1] visitDeclarator: a
[PASS1] visitDirectDeclarator: a
[PASS1] visitBlockItem: boolb=true;
[PASS1] visitDeclaration: boolb=true;
[PASS1] visitDeclarationSpecifiers: bool
[PASS1] visitDeclarationSpecifier: bool
[PASS1] visitBoolType: bool
[PASS1] visitDeclarator: b
[PASS1] visitDirectDeclarator: b
[PASS1] visitBlockItem: boolc=false;
[PASS1] visitDeclaration: boolc=false;
[PASS1] visitDeclarationSpecifiers: bool
[PASS1] visitDeclarationSpecifier: bool
[PASS1] visitBoolType: bool
[PASS1] visitDeclarator: c
[PASS1] visitDirectDeclarator: c
[PASS1] visitBlockItem: boold=true;
[PASS1] visitDeclaration: boold=true;
[PASS1] visitDeclarationSpecifiers: bool
[PASS1] visitDeclarationSpecifier: bool
[PASS1] visitBoolType: bool
[PASS1] visitDeclarator: d
[PASS1] visitDirectDeclarator: d
[PASS1] visitBlockItem: boole=false;
[PASS1] visitDeclaration: boole=false;
[PASS1] visitDeclarationSpecifiers: bool
[PASS1] visitDeclarationSpecifier: bool
[PASS1] visitBoolType: bool
[PASS1] visitDeclarator: e
[PASS1] visitDirectDeclarator: e
[PASS1] visitBlockItem: boolf=true;
[PASS1] visitDeclaration: boolf=true;
[PASS1] visitDeclarationSpecifiers: bool
[PASS1] visitDeclarationSpecifier: bool
[PASS1] visitBoolType: bool
[PASS1] visitDeclarator: f
[PASS1] visitDirectDeclarator: f
[PASS1] visitBlockItem: if(a){}elseif(b){}elseif(c){}elseif(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS1] visitStatement: if(a){}elseif(b){}elseif(c){}elseif(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS1] visitStatement: {}
[PASS1] visitCompoundStatement: {}
[PASS1] visitStatement: if(b){}elseif(c){}elseif(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS1] visitStatement: {}
[PASS1] visitCompoundStatement: {}
[PASS1] visitStatement: if(c){}elseif(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS1] visitStatement: {}
[PASS1] visitCompoundStatement: {}
[PASS1] visitStatement: if(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS1] visitStatement: {}
[PASS1] visitCompoundStatement: {}
[PASS1] visitStatement: if(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS1] visitStatement: {}
[PASS1] visitCompoundStatement: {}
[PASS1] visitStatement: if(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS1] visitStatement: {}
[PASS1] visitCompoundStatement: {}
[PASS1] visitStatement: if(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS1] visitStatement: {}
[PASS1] visitCompoundStatement: {}
[PASS1] visitStatement: if(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS1] visitStatement: {}
[PASS1] visitCompoundStatement: {}
[PASS1] visitStatement: if(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS1] visitStatement: {}
[PASS1] visitCompoundStatement: {}
[PASS1] visitStatement: if(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS1] visitStatement: {}
[PASS1] visitCompoundStatement: {}
[PASS1] visitStatement: if(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS1] visitStatement: {}
[PASS1] visitCompoundStatement: {}
[PASS1] visitStatement: if(aandb){}elseif(cord){}else{}
[PASS1] visitStatement: {}
[PASS1] visitCompoundStatement: {}
[PASS1] visitStatement: if(cord){}else{}
[PASS1] visitStatement: {}
[PASS1] visitCompoundStatement: {}
[PASS1] visitStatement: {}
[PASS1] visitCompoundStatement: {}
[PASS1] visitCompilationUnit: Printing xref table.
[PASS2] visitCompilationUnit: voidarithmetic(void){uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));boola=false;boolb=true;boolc=false;boold=true;boole=false;boolf=true;if(a){}elseif(b){}elseif(c){}elseif(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}}<EOF>
[PASS2] visitFunctionDefinition: voidarithmetic(void){uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));boola=false;boolb=true;boolc=false;boold=true;boole=false;boolf=true;if(a){}elseif(b){}elseif(c){}elseif(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}}
[PASS2] visitCompoundStatement: {uint32_tx=0;x+=0x1234;x-=0x1234;x/=0x1234;x*=0x1234;x^=0x1234;x~=0x1234;x|=0x1234;x&=0x1234;uint32_ty=0xFFFFFFFF;y=x+9999;y=x-9999;y=x/9999;y=x*9999;y=x^9999;y=x|9999;y=x&9999;uint32_tz=((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4));boola=false;boolb=true;boolc=false;boold=true;boole=false;boolf=true;if(a){}elseif(b){}elseif(c){}elseif(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}}
[PASS2] visitAssignmentExpression: 0
[PASS2] visitConditionalExpression: 0
[PASS2] visitLogicalOrExpression: 0
[PASS2] visitLogicalAndExpression: 0
[PASS2] visitInclusiveOrExpression: 0
[PASS2] visitExclusiveOrExpression: 0
[PASS2] visitAndExpression: 0
[PASS2] visitEqualityExpression: 0
[PASS2] visitRelationalExpression: 0
[PASS2] visitShiftExpression: 0
[PASS2] visitAdditiveExpression: 0
[PASS2] visitMultiplicativeExpression: 0
[PASS2] visitUnaryExpression: 0
[PASS2] visitPostfixExpression: 0
[PASS2] visitPrimaryExpression: 0
[PASS2] visitStatement: x+=0x1234;
[PASS2] visitExpression: x+=0x1234
[PASS2] visitAssignmentExpression: x+=0x1234
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitAssignmentOperator: +=
[PASS2] visitAssignmentExpression: 0x1234
[PASS2] visitConditionalExpression: 0x1234
[PASS2] visitLogicalOrExpression: 0x1234
[PASS2] visitLogicalAndExpression: 0x1234
[PASS2] visitInclusiveOrExpression: 0x1234
[PASS2] visitExclusiveOrExpression: 0x1234
[PASS2] visitAndExpression: 0x1234
[PASS2] visitEqualityExpression: 0x1234
[PASS2] visitRelationalExpression: 0x1234
[PASS2] visitShiftExpression: 0x1234
[PASS2] visitAdditiveExpression: 0x1234
[PASS2] visitMultiplicativeExpression: 0x1234
[PASS2] visitUnaryExpression: 0x1234
[PASS2] visitPostfixExpression: 0x1234
[PASS2] visitPrimaryExpression: 0x1234
[PASS2] visitStatement: x-=0x1234;
[PASS2] visitExpression: x-=0x1234
[PASS2] visitAssignmentExpression: x-=0x1234
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitAssignmentOperator: -=
[PASS2] visitAssignmentExpression: 0x1234
[PASS2] visitConditionalExpression: 0x1234
[PASS2] visitLogicalOrExpression: 0x1234
[PASS2] visitLogicalAndExpression: 0x1234
[PASS2] visitInclusiveOrExpression: 0x1234
[PASS2] visitExclusiveOrExpression: 0x1234
[PASS2] visitAndExpression: 0x1234
[PASS2] visitEqualityExpression: 0x1234
[PASS2] visitRelationalExpression: 0x1234
[PASS2] visitShiftExpression: 0x1234
[PASS2] visitAdditiveExpression: 0x1234
[PASS2] visitMultiplicativeExpression: 0x1234
[PASS2] visitUnaryExpression: 0x1234
[PASS2] visitPostfixExpression: 0x1234
[PASS2] visitPrimaryExpression: 0x1234
[PASS2] visitStatement: x/=0x1234;
[PASS2] visitExpression: x/=0x1234
[PASS2] visitAssignmentExpression: x/=0x1234
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitAssignmentOperator: /=
[PASS2] visitAssignmentExpression: 0x1234
[PASS2] visitConditionalExpression: 0x1234
[PASS2] visitLogicalOrExpression: 0x1234
[PASS2] visitLogicalAndExpression: 0x1234
[PASS2] visitInclusiveOrExpression: 0x1234
[PASS2] visitExclusiveOrExpression: 0x1234
[PASS2] visitAndExpression: 0x1234
[PASS2] visitEqualityExpression: 0x1234
[PASS2] visitRelationalExpression: 0x1234
[PASS2] visitShiftExpression: 0x1234
[PASS2] visitAdditiveExpression: 0x1234
[PASS2] visitMultiplicativeExpression: 0x1234
[PASS2] visitUnaryExpression: 0x1234
[PASS2] visitPostfixExpression: 0x1234
[PASS2] visitPrimaryExpression: 0x1234
[PASS2] visitStatement: x*=0x1234;
[PASS2] visitExpression: x*=0x1234
[PASS2] visitAssignmentExpression: x*=0x1234
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitAssignmentOperator: *=
[PASS2] visitAssignmentExpression: 0x1234
[PASS2] visitConditionalExpression: 0x1234
[PASS2] visitLogicalOrExpression: 0x1234
[PASS2] visitLogicalAndExpression: 0x1234
[PASS2] visitInclusiveOrExpression: 0x1234
[PASS2] visitExclusiveOrExpression: 0x1234
[PASS2] visitAndExpression: 0x1234
[PASS2] visitEqualityExpression: 0x1234
[PASS2] visitRelationalExpression: 0x1234
[PASS2] visitShiftExpression: 0x1234
[PASS2] visitAdditiveExpression: 0x1234
[PASS2] visitMultiplicativeExpression: 0x1234
[PASS2] visitUnaryExpression: 0x1234
[PASS2] visitPostfixExpression: 0x1234
[PASS2] visitPrimaryExpression: 0x1234
[PASS2] visitStatement: x^=0x1234;
[PASS2] visitExpression: x^=0x1234
[PASS2] visitAssignmentExpression: x^=0x1234
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitAssignmentOperator: ^=
[PASS2] visitAssignmentExpression: 0x1234
[PASS2] visitConditionalExpression: 0x1234
[PASS2] visitLogicalOrExpression: 0x1234
[PASS2] visitLogicalAndExpression: 0x1234
[PASS2] visitInclusiveOrExpression: 0x1234
[PASS2] visitExclusiveOrExpression: 0x1234
[PASS2] visitAndExpression: 0x1234
[PASS2] visitEqualityExpression: 0x1234
[PASS2] visitRelationalExpression: 0x1234
[PASS2] visitShiftExpression: 0x1234
[PASS2] visitAdditiveExpression: 0x1234
[PASS2] visitMultiplicativeExpression: 0x1234
[PASS2] visitUnaryExpression: 0x1234
[PASS2] visitPostfixExpression: 0x1234
[PASS2] visitPrimaryExpression: 0x1234
[PASS2] visitStatement: x~=0x1234;
[PASS2] visitExpression: x~=0x1234
[PASS2] visitAssignmentExpression: x~=0x1234
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitAssignmentOperator: ~=
[PASS2] visitAssignmentExpression: 0x1234
[PASS2] visitConditionalExpression: 0x1234
[PASS2] visitLogicalOrExpression: 0x1234
[PASS2] visitLogicalAndExpression: 0x1234
[PASS2] visitInclusiveOrExpression: 0x1234
[PASS2] visitExclusiveOrExpression: 0x1234
[PASS2] visitAndExpression: 0x1234
[PASS2] visitEqualityExpression: 0x1234
[PASS2] visitRelationalExpression: 0x1234
[PASS2] visitShiftExpression: 0x1234
[PASS2] visitAdditiveExpression: 0x1234
[PASS2] visitMultiplicativeExpression: 0x1234
[PASS2] visitUnaryExpression: 0x1234
[PASS2] visitPostfixExpression: 0x1234
[PASS2] visitPrimaryExpression: 0x1234
[PASS2] visitStatement: x|=0x1234;
[PASS2] visitExpression: x|=0x1234
[PASS2] visitAssignmentExpression: x|=0x1234
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitAssignmentOperator: |=
[PASS2] visitAssignmentExpression: 0x1234
[PASS2] visitConditionalExpression: 0x1234
[PASS2] visitLogicalOrExpression: 0x1234
[PASS2] visitLogicalAndExpression: 0x1234
[PASS2] visitInclusiveOrExpression: 0x1234
[PASS2] visitExclusiveOrExpression: 0x1234
[PASS2] visitAndExpression: 0x1234
[PASS2] visitEqualityExpression: 0x1234
[PASS2] visitRelationalExpression: 0x1234
[PASS2] visitShiftExpression: 0x1234
[PASS2] visitAdditiveExpression: 0x1234
[PASS2] visitMultiplicativeExpression: 0x1234
[PASS2] visitUnaryExpression: 0x1234
[PASS2] visitPostfixExpression: 0x1234
[PASS2] visitPrimaryExpression: 0x1234
[PASS2] visitStatement: x&=0x1234;
[PASS2] visitExpression: x&=0x1234
[PASS2] visitAssignmentExpression: x&=0x1234
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitAssignmentOperator: &=
[PASS2] visitAssignmentExpression: 0x1234
[PASS2] visitConditionalExpression: 0x1234
[PASS2] visitLogicalOrExpression: 0x1234
[PASS2] visitLogicalAndExpression: 0x1234
[PASS2] visitInclusiveOrExpression: 0x1234
[PASS2] visitExclusiveOrExpression: 0x1234
[PASS2] visitAndExpression: 0x1234
[PASS2] visitEqualityExpression: 0x1234
[PASS2] visitRelationalExpression: 0x1234
[PASS2] visitShiftExpression: 0x1234
[PASS2] visitAdditiveExpression: 0x1234
[PASS2] visitMultiplicativeExpression: 0x1234
[PASS2] visitUnaryExpression: 0x1234
[PASS2] visitPostfixExpression: 0x1234
[PASS2] visitPrimaryExpression: 0x1234
[PASS2] visitAssignmentExpression: 0xFFFFFFFF
[PASS2] visitConditionalExpression: 0xFFFFFFFF
[PASS2] visitLogicalOrExpression: 0xFFFFFFFF
[PASS2] visitLogicalAndExpression: 0xFFFFFFFF
[PASS2] visitInclusiveOrExpression: 0xFFFFFFFF
[PASS2] visitExclusiveOrExpression: 0xFFFFFFFF
[PASS2] visitAndExpression: 0xFFFFFFFF
[PASS2] visitEqualityExpression: 0xFFFFFFFF
[PASS2] visitRelationalExpression: 0xFFFFFFFF
[PASS2] visitShiftExpression: 0xFFFFFFFF
[PASS2] visitAdditiveExpression: 0xFFFFFFFF
[PASS2] visitMultiplicativeExpression: 0xFFFFFFFF
[PASS2] visitUnaryExpression: 0xFFFFFFFF
[PASS2] visitPostfixExpression: 0xFFFFFFFF
[PASS2] visitPrimaryExpression: 0xFFFFFFFF
[PASS2] visitStatement: y=x+9999;
[PASS2] visitExpression: y=x+9999
[PASS2] visitAssignmentExpression: y=x+9999
[PASS2] visitUnaryExpression: y
[PASS2] visitPostfixExpression: y
[PASS2] visitPrimaryExpression: y
[PASS2] visitAssignmentOperator: =
[PASS2] visitAssignmentExpression: x+9999
[PASS2] visitConditionalExpression: x+9999
[PASS2] visitLogicalOrExpression: x+9999
[PASS2] visitLogicalAndExpression: x+9999
[PASS2] visitInclusiveOrExpression: x+9999
[PASS2] visitExclusiveOrExpression: x+9999
[PASS2] visitAndExpression: x+9999
[PASS2] visitEqualityExpression: x+9999
[PASS2] visitRelationalExpression: x+9999
[PASS2] visitShiftExpression: x+9999
[PASS2] visitAdditiveExpression: x+9999
[PASS2] visitAdditiveExpression: x
[PASS2] visitMultiplicativeExpression: x
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitMultiplicativeExpression: 9999
[PASS2] visitUnaryExpression: 9999
[PASS2] visitPostfixExpression: 9999
[PASS2] visitPrimaryExpression: 9999
[PASS2] visitStatement: y=x-9999;
[PASS2] visitExpression: y=x-9999
[PASS2] visitAssignmentExpression: y=x-9999
[PASS2] visitUnaryExpression: y
[PASS2] visitPostfixExpression: y
[PASS2] visitPrimaryExpression: y
[PASS2] visitAssignmentOperator: =
[PASS2] visitAssignmentExpression: x-9999
[PASS2] visitConditionalExpression: x-9999
[PASS2] visitLogicalOrExpression: x-9999
[PASS2] visitLogicalAndExpression: x-9999
[PASS2] visitInclusiveOrExpression: x-9999
[PASS2] visitExclusiveOrExpression: x-9999
[PASS2] visitAndExpression: x-9999
[PASS2] visitEqualityExpression: x-9999
[PASS2] visitRelationalExpression: x-9999
[PASS2] visitShiftExpression: x-9999
[PASS2] visitAdditiveExpression: x-9999
[PASS2] visitAdditiveExpression: x
[PASS2] visitMultiplicativeExpression: x
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitMultiplicativeExpression: 9999
[PASS2] visitUnaryExpression: 9999
[PASS2] visitPostfixExpression: 9999
[PASS2] visitPrimaryExpression: 9999
[PASS2] visitStatement: y=x/9999;
[PASS2] visitExpression: y=x/9999
[PASS2] visitAssignmentExpression: y=x/9999
[PASS2] visitUnaryExpression: y
[PASS2] visitPostfixExpression: y
[PASS2] visitPrimaryExpression: y
[PASS2] visitAssignmentOperator: =
[PASS2] visitAssignmentExpression: x/9999
[PASS2] visitConditionalExpression: x/9999
[PASS2] visitLogicalOrExpression: x/9999
[PASS2] visitLogicalAndExpression: x/9999
[PASS2] visitInclusiveOrExpression: x/9999
[PASS2] visitExclusiveOrExpression: x/9999
[PASS2] visitAndExpression: x/9999
[PASS2] visitEqualityExpression: x/9999
[PASS2] visitRelationalExpression: x/9999
[PASS2] visitShiftExpression: x/9999
[PASS2] visitAdditiveExpression: x/9999
[PASS2] visitMultiplicativeExpression: x/9999
[PASS2] visitMultiplicativeExpression: x
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitUnaryExpression: 9999
[PASS2] visitPostfixExpression: 9999
[PASS2] visitPrimaryExpression: 9999
[PASS2] visitStatement: y=x*9999;
[PASS2] visitExpression: y=x*9999
[PASS2] visitAssignmentExpression: y=x*9999
[PASS2] visitUnaryExpression: y
[PASS2] visitPostfixExpression: y
[PASS2] visitPrimaryExpression: y
[PASS2] visitAssignmentOperator: =
[PASS2] visitAssignmentExpression: x*9999
[PASS2] visitConditionalExpression: x*9999
[PASS2] visitLogicalOrExpression: x*9999
[PASS2] visitLogicalAndExpression: x*9999
[PASS2] visitInclusiveOrExpression: x*9999
[PASS2] visitExclusiveOrExpression: x*9999
[PASS2] visitAndExpression: x*9999
[PASS2] visitEqualityExpression: x*9999
[PASS2] visitRelationalExpression: x*9999
[PASS2] visitShiftExpression: x*9999
[PASS2] visitAdditiveExpression: x*9999
[PASS2] visitMultiplicativeExpression: x*9999
[PASS2] visitMultiplicativeExpression: x
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitUnaryExpression: 9999
[PASS2] visitPostfixExpression: 9999
[PASS2] visitPrimaryExpression: 9999
[PASS2] visitStatement: y=x^9999;
[PASS2] visitExpression: y=x^9999
[PASS2] visitAssignmentExpression: y=x^9999
[PASS2] visitUnaryExpression: y
[PASS2] visitPostfixExpression: y
[PASS2] visitPrimaryExpression: y
[PASS2] visitAssignmentOperator: =
[PASS2] visitAssignmentExpression: x^9999
[PASS2] visitConditionalExpression: x^9999
[PASS2] visitLogicalOrExpression: x^9999
[PASS2] visitLogicalAndExpression: x^9999
[PASS2] visitInclusiveOrExpression: x^9999
[PASS2] visitExclusiveOrExpression: x^9999
[PASS2] visitExclusiveOrExpression: x
[PASS2] visitAndExpression: x
[PASS2] visitEqualityExpression: x
[PASS2] visitRelationalExpression: x
[PASS2] visitShiftExpression: x
[PASS2] visitAdditiveExpression: x
[PASS2] visitMultiplicativeExpression: x
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitAndExpression: 9999
[PASS2] visitEqualityExpression: 9999
[PASS2] visitRelationalExpression: 9999
[PASS2] visitShiftExpression: 9999
[PASS2] visitAdditiveExpression: 9999
[PASS2] visitMultiplicativeExpression: 9999
[PASS2] visitUnaryExpression: 9999
[PASS2] visitPostfixExpression: 9999
[PASS2] visitPrimaryExpression: 9999
[PASS2] visitStatement: y=x|9999;
[PASS2] visitExpression: y=x|9999
[PASS2] visitAssignmentExpression: y=x|9999
[PASS2] visitUnaryExpression: y
[PASS2] visitPostfixExpression: y
[PASS2] visitPrimaryExpression: y
[PASS2] visitAssignmentOperator: =
[PASS2] visitAssignmentExpression: x|9999
[PASS2] visitConditionalExpression: x|9999
[PASS2] visitLogicalOrExpression: x|9999
[PASS2] visitLogicalAndExpression: x|9999
[PASS2] visitInclusiveOrExpression: x|9999
[PASS2] visitInclusiveOrExpression: x
[PASS2] visitExclusiveOrExpression: x
[PASS2] visitAndExpression: x
[PASS2] visitEqualityExpression: x
[PASS2] visitRelationalExpression: x
[PASS2] visitShiftExpression: x
[PASS2] visitAdditiveExpression: x
[PASS2] visitMultiplicativeExpression: x
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitExclusiveOrExpression: 9999
[PASS2] visitAndExpression: 9999
[PASS2] visitEqualityExpression: 9999
[PASS2] visitRelationalExpression: 9999
[PASS2] visitShiftExpression: 9999
[PASS2] visitAdditiveExpression: 9999
[PASS2] visitMultiplicativeExpression: 9999
[PASS2] visitUnaryExpression: 9999
[PASS2] visitPostfixExpression: 9999
[PASS2] visitPrimaryExpression: 9999
[PASS2] visitStatement: y=x&9999;
[PASS2] visitExpression: y=x&9999
[PASS2] visitAssignmentExpression: y=x&9999
[PASS2] visitUnaryExpression: y
[PASS2] visitPostfixExpression: y
[PASS2] visitPrimaryExpression: y
[PASS2] visitAssignmentOperator: =
[PASS2] visitAssignmentExpression: x&9999
[PASS2] visitConditionalExpression: x&9999
[PASS2] visitLogicalOrExpression: x&9999
[PASS2] visitLogicalAndExpression: x&9999
[PASS2] visitInclusiveOrExpression: x&9999
[PASS2] visitExclusiveOrExpression: x&9999
[PASS2] visitAndExpression: x&9999
[PASS2] visitAndExpression: x
[PASS2] visitEqualityExpression: x
[PASS2] visitRelationalExpression: x
[PASS2] visitShiftExpression: x
[PASS2] visitAdditiveExpression: x
[PASS2] visitMultiplicativeExpression: x
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitEqualityExpression: 9999
[PASS2] visitRelationalExpression: 9999
[PASS2] visitShiftExpression: 9999
[PASS2] visitAdditiveExpression: 9999
[PASS2] visitMultiplicativeExpression: 9999
[PASS2] visitUnaryExpression: 9999
[PASS2] visitPostfixExpression: 9999
[PASS2] visitPrimaryExpression: 9999
[PASS2] visitAssignmentExpression: ((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4))
[PASS2] visitConditionalExpression: ((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4))
[PASS2] visitLogicalOrExpression: ((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4))
[PASS2] visitLogicalAndExpression: ((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4))
[PASS2] visitInclusiveOrExpression: ((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))|((x&(1<<5))>>(31-4))
[PASS2] visitInclusiveOrExpression: ((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))|((x&(1<<4))>>(31-4))
[PASS2] visitInclusiveOrExpression: ((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))|((x&(1<<3))>>(31-3))
[PASS2] visitInclusiveOrExpression: ((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))|((x&(1<<2))>>(31-2))
[PASS2] visitInclusiveOrExpression: ((x&(1<<0))>>(31-0))|((x&(1<<1))>>(31-1))
[PASS2] visitInclusiveOrExpression: ((x&(1<<0))>>(31-0))
[PASS2] visitExclusiveOrExpression: ((x&(1<<0))>>(31-0))
[PASS2] visitAndExpression: ((x&(1<<0))>>(31-0))
[PASS2] visitEqualityExpression: ((x&(1<<0))>>(31-0))
[PASS2] visitRelationalExpression: ((x&(1<<0))>>(31-0))
[PASS2] visitShiftExpression: ((x&(1<<0))>>(31-0))
[PASS2] visitAdditiveExpression: ((x&(1<<0))>>(31-0))
[PASS2] visitMultiplicativeExpression: ((x&(1<<0))>>(31-0))
[PASS2] visitUnaryExpression: ((x&(1<<0))>>(31-0))
[PASS2] visitPostfixExpression: ((x&(1<<0))>>(31-0))
[PASS2] visitPrimaryExpression: ((x&(1<<0))>>(31-0))
[PASS2] visitExpression: (x&(1<<0))>>(31-0)
[PASS2] visitAssignmentExpression: (x&(1<<0))>>(31-0)
[PASS2] visitConditionalExpression: (x&(1<<0))>>(31-0)
[PASS2] visitLogicalOrExpression: (x&(1<<0))>>(31-0)
[PASS2] visitLogicalAndExpression: (x&(1<<0))>>(31-0)
[PASS2] visitInclusiveOrExpression: (x&(1<<0))>>(31-0)
[PASS2] visitExclusiveOrExpression: (x&(1<<0))>>(31-0)
[PASS2] visitAndExpression: (x&(1<<0))>>(31-0)
[PASS2] visitEqualityExpression: (x&(1<<0))>>(31-0)
[PASS2] visitRelationalExpression: (x&(1<<0))>>(31-0)
[PASS2] visitShiftExpression: (x&(1<<0))>>(31-0)
[PASS2] visitShiftExpression: (x&(1<<0))
[PASS2] visitAdditiveExpression: (x&(1<<0))
[PASS2] visitMultiplicativeExpression: (x&(1<<0))
[PASS2] visitUnaryExpression: (x&(1<<0))
[PASS2] visitPostfixExpression: (x&(1<<0))
[PASS2] visitPrimaryExpression: (x&(1<<0))
[PASS2] visitExpression: x&(1<<0)
[PASS2] visitAssignmentExpression: x&(1<<0)
[PASS2] visitConditionalExpression: x&(1<<0)
[PASS2] visitLogicalOrExpression: x&(1<<0)
[PASS2] visitLogicalAndExpression: x&(1<<0)
[PASS2] visitInclusiveOrExpression: x&(1<<0)
[PASS2] visitExclusiveOrExpression: x&(1<<0)
[PASS2] visitAndExpression: x&(1<<0)
[PASS2] visitAndExpression: x
[PASS2] visitEqualityExpression: x
[PASS2] visitRelationalExpression: x
[PASS2] visitShiftExpression: x
[PASS2] visitAdditiveExpression: x
[PASS2] visitMultiplicativeExpression: x
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitEqualityExpression: (1<<0)
[PASS2] visitRelationalExpression: (1<<0)
[PASS2] visitShiftExpression: (1<<0)
[PASS2] visitAdditiveExpression: (1<<0)
[PASS2] visitMultiplicativeExpression: (1<<0)
[PASS2] visitUnaryExpression: (1<<0)
[PASS2] visitPostfixExpression: (1<<0)
[PASS2] visitPrimaryExpression: (1<<0)
[PASS2] visitExpression: 1<<0
[PASS2] visitAssignmentExpression: 1<<0
[PASS2] visitConditionalExpression: 1<<0
[PASS2] visitLogicalOrExpression: 1<<0
[PASS2] visitLogicalAndExpression: 1<<0
[PASS2] visitInclusiveOrExpression: 1<<0
[PASS2] visitExclusiveOrExpression: 1<<0
[PASS2] visitAndExpression: 1<<0
[PASS2] visitEqualityExpression: 1<<0
[PASS2] visitRelationalExpression: 1<<0
[PASS2] visitShiftExpression: 1<<0
[PASS2] visitShiftExpression: 1
[PASS2] visitAdditiveExpression: 1
[PASS2] visitMultiplicativeExpression: 1
[PASS2] visitUnaryExpression: 1
[PASS2] visitPostfixExpression: 1
[PASS2] visitPrimaryExpression: 1
[PASS2] visitAdditiveExpression: 0
[PASS2] visitMultiplicativeExpression: 0
[PASS2] visitUnaryExpression: 0
[PASS2] visitPostfixExpression: 0
[PASS2] visitPrimaryExpression: 0
[PASS2] visitAdditiveExpression: (31-0)
[PASS2] visitMultiplicativeExpression: (31-0)
[PASS2] visitUnaryExpression: (31-0)
[PASS2] visitPostfixExpression: (31-0)
[PASS2] visitPrimaryExpression: (31-0)
[PASS2] visitExpression: 31-0
[PASS2] visitAssignmentExpression: 31-0
[PASS2] visitConditionalExpression: 31-0
[PASS2] visitLogicalOrExpression: 31-0
[PASS2] visitLogicalAndExpression: 31-0
[PASS2] visitInclusiveOrExpression: 31-0
[PASS2] visitExclusiveOrExpression: 31-0
[PASS2] visitAndExpression: 31-0
[PASS2] visitEqualityExpression: 31-0
[PASS2] visitRelationalExpression: 31-0
[PASS2] visitShiftExpression: 31-0
[PASS2] visitAdditiveExpression: 31-0
[PASS2] visitAdditiveExpression: 31
[PASS2] visitMultiplicativeExpression: 31
[PASS2] visitUnaryExpression: 31
[PASS2] visitPostfixExpression: 31
[PASS2] visitPrimaryExpression: 31
[PASS2] visitMultiplicativeExpression: 0
[PASS2] visitUnaryExpression: 0
[PASS2] visitPostfixExpression: 0
[PASS2] visitPrimaryExpression: 0
[PASS2] visitExclusiveOrExpression: ((x&(1<<1))>>(31-1))
[PASS2] visitAndExpression: ((x&(1<<1))>>(31-1))
[PASS2] visitEqualityExpression: ((x&(1<<1))>>(31-1))
[PASS2] visitRelationalExpression: ((x&(1<<1))>>(31-1))
[PASS2] visitShiftExpression: ((x&(1<<1))>>(31-1))
[PASS2] visitAdditiveExpression: ((x&(1<<1))>>(31-1))
[PASS2] visitMultiplicativeExpression: ((x&(1<<1))>>(31-1))
[PASS2] visitUnaryExpression: ((x&(1<<1))>>(31-1))
[PASS2] visitPostfixExpression: ((x&(1<<1))>>(31-1))
[PASS2] visitPrimaryExpression: ((x&(1<<1))>>(31-1))
[PASS2] visitExpression: (x&(1<<1))>>(31-1)
[PASS2] visitAssignmentExpression: (x&(1<<1))>>(31-1)
[PASS2] visitConditionalExpression: (x&(1<<1))>>(31-1)
[PASS2] visitLogicalOrExpression: (x&(1<<1))>>(31-1)
[PASS2] visitLogicalAndExpression: (x&(1<<1))>>(31-1)
[PASS2] visitInclusiveOrExpression: (x&(1<<1))>>(31-1)
[PASS2] visitExclusiveOrExpression: (x&(1<<1))>>(31-1)
[PASS2] visitAndExpression: (x&(1<<1))>>(31-1)
[PASS2] visitEqualityExpression: (x&(1<<1))>>(31-1)
[PASS2] visitRelationalExpression: (x&(1<<1))>>(31-1)
[PASS2] visitShiftExpression: (x&(1<<1))>>(31-1)
[PASS2] visitShiftExpression: (x&(1<<1))
[PASS2] visitAdditiveExpression: (x&(1<<1))
[PASS2] visitMultiplicativeExpression: (x&(1<<1))
[PASS2] visitUnaryExpression: (x&(1<<1))
[PASS2] visitPostfixExpression: (x&(1<<1))
[PASS2] visitPrimaryExpression: (x&(1<<1))
[PASS2] visitExpression: x&(1<<1)
[PASS2] visitAssignmentExpression: x&(1<<1)
[PASS2] visitConditionalExpression: x&(1<<1)
[PASS2] visitLogicalOrExpression: x&(1<<1)
[PASS2] visitLogicalAndExpression: x&(1<<1)
[PASS2] visitInclusiveOrExpression: x&(1<<1)
[PASS2] visitExclusiveOrExpression: x&(1<<1)
[PASS2] visitAndExpression: x&(1<<1)
[PASS2] visitAndExpression: x
[PASS2] visitEqualityExpression: x
[PASS2] visitRelationalExpression: x
[PASS2] visitShiftExpression: x
[PASS2] visitAdditiveExpression: x
[PASS2] visitMultiplicativeExpression: x
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitEqualityExpression: (1<<1)
[PASS2] visitRelationalExpression: (1<<1)
[PASS2] visitShiftExpression: (1<<1)
[PASS2] visitAdditiveExpression: (1<<1)
[PASS2] visitMultiplicativeExpression: (1<<1)
[PASS2] visitUnaryExpression: (1<<1)
[PASS2] visitPostfixExpression: (1<<1)
[PASS2] visitPrimaryExpression: (1<<1)
[PASS2] visitExpression: 1<<1
[PASS2] visitAssignmentExpression: 1<<1
[PASS2] visitConditionalExpression: 1<<1
[PASS2] visitLogicalOrExpression: 1<<1
[PASS2] visitLogicalAndExpression: 1<<1
[PASS2] visitInclusiveOrExpression: 1<<1
[PASS2] visitExclusiveOrExpression: 1<<1
[PASS2] visitAndExpression: 1<<1
[PASS2] visitEqualityExpression: 1<<1
[PASS2] visitRelationalExpression: 1<<1
[PASS2] visitShiftExpression: 1<<1
[PASS2] visitShiftExpression: 1
[PASS2] visitAdditiveExpression: 1
[PASS2] visitMultiplicativeExpression: 1
[PASS2] visitUnaryExpression: 1
[PASS2] visitPostfixExpression: 1
[PASS2] visitPrimaryExpression: 1
[PASS2] visitAdditiveExpression: 1
[PASS2] visitMultiplicativeExpression: 1
[PASS2] visitUnaryExpression: 1
[PASS2] visitPostfixExpression: 1
[PASS2] visitPrimaryExpression: 1
[PASS2] visitAdditiveExpression: (31-1)
[PASS2] visitMultiplicativeExpression: (31-1)
[PASS2] visitUnaryExpression: (31-1)
[PASS2] visitPostfixExpression: (31-1)
[PASS2] visitPrimaryExpression: (31-1)
[PASS2] visitExpression: 31-1
[PASS2] visitAssignmentExpression: 31-1
[PASS2] visitConditionalExpression: 31-1
[PASS2] visitLogicalOrExpression: 31-1
[PASS2] visitLogicalAndExpression: 31-1
[PASS2] visitInclusiveOrExpression: 31-1
[PASS2] visitExclusiveOrExpression: 31-1
[PASS2] visitAndExpression: 31-1
[PASS2] visitEqualityExpression: 31-1
[PASS2] visitRelationalExpression: 31-1
[PASS2] visitShiftExpression: 31-1
[PASS2] visitAdditiveExpression: 31-1
[PASS2] visitAdditiveExpression: 31
[PASS2] visitMultiplicativeExpression: 31
[PASS2] visitUnaryExpression: 31
[PASS2] visitPostfixExpression: 31
[PASS2] visitPrimaryExpression: 31
[PASS2] visitMultiplicativeExpression: 1
[PASS2] visitUnaryExpression: 1
[PASS2] visitPostfixExpression: 1
[PASS2] visitPrimaryExpression: 1
[PASS2] visitExclusiveOrExpression: ((x&(1<<2))>>(31-2))
[PASS2] visitAndExpression: ((x&(1<<2))>>(31-2))
[PASS2] visitEqualityExpression: ((x&(1<<2))>>(31-2))
[PASS2] visitRelationalExpression: ((x&(1<<2))>>(31-2))
[PASS2] visitShiftExpression: ((x&(1<<2))>>(31-2))
[PASS2] visitAdditiveExpression: ((x&(1<<2))>>(31-2))
[PASS2] visitMultiplicativeExpression: ((x&(1<<2))>>(31-2))
[PASS2] visitUnaryExpression: ((x&(1<<2))>>(31-2))
[PASS2] visitPostfixExpression: ((x&(1<<2))>>(31-2))
[PASS2] visitPrimaryExpression: ((x&(1<<2))>>(31-2))
[PASS2] visitExpression: (x&(1<<2))>>(31-2)
[PASS2] visitAssignmentExpression: (x&(1<<2))>>(31-2)
[PASS2] visitConditionalExpression: (x&(1<<2))>>(31-2)
[PASS2] visitLogicalOrExpression: (x&(1<<2))>>(31-2)
[PASS2] visitLogicalAndExpression: (x&(1<<2))>>(31-2)
[PASS2] visitInclusiveOrExpression: (x&(1<<2))>>(31-2)
[PASS2] visitExclusiveOrExpression: (x&(1<<2))>>(31-2)
[PASS2] visitAndExpression: (x&(1<<2))>>(31-2)
[PASS2] visitEqualityExpression: (x&(1<<2))>>(31-2)
[PASS2] visitRelationalExpression: (x&(1<<2))>>(31-2)
[PASS2] visitShiftExpression: (x&(1<<2))>>(31-2)
[PASS2] visitShiftExpression: (x&(1<<2))
[PASS2] visitAdditiveExpression: (x&(1<<2))
[PASS2] visitMultiplicativeExpression: (x&(1<<2))
[PASS2] visitUnaryExpression: (x&(1<<2))
[PASS2] visitPostfixExpression: (x&(1<<2))
[PASS2] visitPrimaryExpression: (x&(1<<2))
[PASS2] visitExpression: x&(1<<2)
[PASS2] visitAssignmentExpression: x&(1<<2)
[PASS2] visitConditionalExpression: x&(1<<2)
[PASS2] visitLogicalOrExpression: x&(1<<2)
[PASS2] visitLogicalAndExpression: x&(1<<2)
[PASS2] visitInclusiveOrExpression: x&(1<<2)
[PASS2] visitExclusiveOrExpression: x&(1<<2)
[PASS2] visitAndExpression: x&(1<<2)
[PASS2] visitAndExpression: x
[PASS2] visitEqualityExpression: x
[PASS2] visitRelationalExpression: x
[PASS2] visitShiftExpression: x
[PASS2] visitAdditiveExpression: x
[PASS2] visitMultiplicativeExpression: x
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitEqualityExpression: (1<<2)
[PASS2] visitRelationalExpression: (1<<2)
[PASS2] visitShiftExpression: (1<<2)
[PASS2] visitAdditiveExpression: (1<<2)
[PASS2] visitMultiplicativeExpression: (1<<2)
[PASS2] visitUnaryExpression: (1<<2)
[PASS2] visitPostfixExpression: (1<<2)
[PASS2] visitPrimaryExpression: (1<<2)
[PASS2] visitExpression: 1<<2
[PASS2] visitAssignmentExpression: 1<<2
[PASS2] visitConditionalExpression: 1<<2
[PASS2] visitLogicalOrExpression: 1<<2
[PASS2] visitLogicalAndExpression: 1<<2
[PASS2] visitInclusiveOrExpression: 1<<2
[PASS2] visitExclusiveOrExpression: 1<<2
[PASS2] visitAndExpression: 1<<2
[PASS2] visitEqualityExpression: 1<<2
[PASS2] visitRelationalExpression: 1<<2
[PASS2] visitShiftExpression: 1<<2
[PASS2] visitShiftExpression: 1
[PASS2] visitAdditiveExpression: 1
[PASS2] visitMultiplicativeExpression: 1
[PASS2] visitUnaryExpression: 1
[PASS2] visitPostfixExpression: 1
[PASS2] visitPrimaryExpression: 1
[PASS2] visitAdditiveExpression: 2
[PASS2] visitMultiplicativeExpression: 2
[PASS2] visitUnaryExpression: 2
[PASS2] visitPostfixExpression: 2
[PASS2] visitPrimaryExpression: 2
[PASS2] visitAdditiveExpression: (31-2)
[PASS2] visitMultiplicativeExpression: (31-2)
[PASS2] visitUnaryExpression: (31-2)
[PASS2] visitPostfixExpression: (31-2)
[PASS2] visitPrimaryExpression: (31-2)
[PASS2] visitExpression: 31-2
[PASS2] visitAssignmentExpression: 31-2
[PASS2] visitConditionalExpression: 31-2
[PASS2] visitLogicalOrExpression: 31-2
[PASS2] visitLogicalAndExpression: 31-2
[PASS2] visitInclusiveOrExpression: 31-2
[PASS2] visitExclusiveOrExpression: 31-2
[PASS2] visitAndExpression: 31-2
[PASS2] visitEqualityExpression: 31-2
[PASS2] visitRelationalExpression: 31-2
[PASS2] visitShiftExpression: 31-2
[PASS2] visitAdditiveExpression: 31-2
[PASS2] visitAdditiveExpression: 31
[PASS2] visitMultiplicativeExpression: 31
[PASS2] visitUnaryExpression: 31
[PASS2] visitPostfixExpression: 31
[PASS2] visitPrimaryExpression: 31
[PASS2] visitMultiplicativeExpression: 2
[PASS2] visitUnaryExpression: 2
[PASS2] visitPostfixExpression: 2
[PASS2] visitPrimaryExpression: 2
[PASS2] visitExclusiveOrExpression: ((x&(1<<3))>>(31-3))
[PASS2] visitAndExpression: ((x&(1<<3))>>(31-3))
[PASS2] visitEqualityExpression: ((x&(1<<3))>>(31-3))
[PASS2] visitRelationalExpression: ((x&(1<<3))>>(31-3))
[PASS2] visitShiftExpression: ((x&(1<<3))>>(31-3))
[PASS2] visitAdditiveExpression: ((x&(1<<3))>>(31-3))
[PASS2] visitMultiplicativeExpression: ((x&(1<<3))>>(31-3))
[PASS2] visitUnaryExpression: ((x&(1<<3))>>(31-3))
[PASS2] visitPostfixExpression: ((x&(1<<3))>>(31-3))
[PASS2] visitPrimaryExpression: ((x&(1<<3))>>(31-3))
[PASS2] visitExpression: (x&(1<<3))>>(31-3)
[PASS2] visitAssignmentExpression: (x&(1<<3))>>(31-3)
[PASS2] visitConditionalExpression: (x&(1<<3))>>(31-3)
[PASS2] visitLogicalOrExpression: (x&(1<<3))>>(31-3)
[PASS2] visitLogicalAndExpression: (x&(1<<3))>>(31-3)
[PASS2] visitInclusiveOrExpression: (x&(1<<3))>>(31-3)
[PASS2] visitExclusiveOrExpression: (x&(1<<3))>>(31-3)
[PASS2] visitAndExpression: (x&(1<<3))>>(31-3)
[PASS2] visitEqualityExpression: (x&(1<<3))>>(31-3)
[PASS2] visitRelationalExpression: (x&(1<<3))>>(31-3)
[PASS2] visitShiftExpression: (x&(1<<3))>>(31-3)
[PASS2] visitShiftExpression: (x&(1<<3))
[PASS2] visitAdditiveExpression: (x&(1<<3))
[PASS2] visitMultiplicativeExpression: (x&(1<<3))
[PASS2] visitUnaryExpression: (x&(1<<3))
[PASS2] visitPostfixExpression: (x&(1<<3))
[PASS2] visitPrimaryExpression: (x&(1<<3))
[PASS2] visitExpression: x&(1<<3)
[PASS2] visitAssignmentExpression: x&(1<<3)
[PASS2] visitConditionalExpression: x&(1<<3)
[PASS2] visitLogicalOrExpression: x&(1<<3)
[PASS2] visitLogicalAndExpression: x&(1<<3)
[PASS2] visitInclusiveOrExpression: x&(1<<3)
[PASS2] visitExclusiveOrExpression: x&(1<<3)
[PASS2] visitAndExpression: x&(1<<3)
[PASS2] visitAndExpression: x
[PASS2] visitEqualityExpression: x
[PASS2] visitRelationalExpression: x
[PASS2] visitShiftExpression: x
[PASS2] visitAdditiveExpression: x
[PASS2] visitMultiplicativeExpression: x
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitEqualityExpression: (1<<3)
[PASS2] visitRelationalExpression: (1<<3)
[PASS2] visitShiftExpression: (1<<3)
[PASS2] visitAdditiveExpression: (1<<3)
[PASS2] visitMultiplicativeExpression: (1<<3)
[PASS2] visitUnaryExpression: (1<<3)
[PASS2] visitPostfixExpression: (1<<3)
[PASS2] visitPrimaryExpression: (1<<3)
[PASS2] visitExpression: 1<<3
[PASS2] visitAssignmentExpression: 1<<3
[PASS2] visitConditionalExpression: 1<<3
[PASS2] visitLogicalOrExpression: 1<<3
[PASS2] visitLogicalAndExpression: 1<<3
[PASS2] visitInclusiveOrExpression: 1<<3
[PASS2] visitExclusiveOrExpression: 1<<3
[PASS2] visitAndExpression: 1<<3
[PASS2] visitEqualityExpression: 1<<3
[PASS2] visitRelationalExpression: 1<<3
[PASS2] visitShiftExpression: 1<<3
[PASS2] visitShiftExpression: 1
[PASS2] visitAdditiveExpression: 1
[PASS2] visitMultiplicativeExpression: 1
[PASS2] visitUnaryExpression: 1
[PASS2] visitPostfixExpression: 1
[PASS2] visitPrimaryExpression: 1
[PASS2] visitAdditiveExpression: 3
[PASS2] visitMultiplicativeExpression: 3
[PASS2] visitUnaryExpression: 3
[PASS2] visitPostfixExpression: 3
[PASS2] visitPrimaryExpression: 3
[PASS2] visitAdditiveExpression: (31-3)
[PASS2] visitMultiplicativeExpression: (31-3)
[PASS2] visitUnaryExpression: (31-3)
[PASS2] visitPostfixExpression: (31-3)
[PASS2] visitPrimaryExpression: (31-3)
[PASS2] visitExpression: 31-3
[PASS2] visitAssignmentExpression: 31-3
[PASS2] visitConditionalExpression: 31-3
[PASS2] visitLogicalOrExpression: 31-3
[PASS2] visitLogicalAndExpression: 31-3
[PASS2] visitInclusiveOrExpression: 31-3
[PASS2] visitExclusiveOrExpression: 31-3
[PASS2] visitAndExpression: 31-3
[PASS2] visitEqualityExpression: 31-3
[PASS2] visitRelationalExpression: 31-3
[PASS2] visitShiftExpression: 31-3
[PASS2] visitAdditiveExpression: 31-3
[PASS2] visitAdditiveExpression: 31
[PASS2] visitMultiplicativeExpression: 31
[PASS2] visitUnaryExpression: 31
[PASS2] visitPostfixExpression: 31
[PASS2] visitPrimaryExpression: 31
[PASS2] visitMultiplicativeExpression: 3
[PASS2] visitUnaryExpression: 3
[PASS2] visitPostfixExpression: 3
[PASS2] visitPrimaryExpression: 3
[PASS2] visitExclusiveOrExpression: ((x&(1<<4))>>(31-4))
[PASS2] visitAndExpression: ((x&(1<<4))>>(31-4))
[PASS2] visitEqualityExpression: ((x&(1<<4))>>(31-4))
[PASS2] visitRelationalExpression: ((x&(1<<4))>>(31-4))
[PASS2] visitShiftExpression: ((x&(1<<4))>>(31-4))
[PASS2] visitAdditiveExpression: ((x&(1<<4))>>(31-4))
[PASS2] visitMultiplicativeExpression: ((x&(1<<4))>>(31-4))
[PASS2] visitUnaryExpression: ((x&(1<<4))>>(31-4))
[PASS2] visitPostfixExpression: ((x&(1<<4))>>(31-4))
[PASS2] visitPrimaryExpression: ((x&(1<<4))>>(31-4))
[PASS2] visitExpression: (x&(1<<4))>>(31-4)
[PASS2] visitAssignmentExpression: (x&(1<<4))>>(31-4)
[PASS2] visitConditionalExpression: (x&(1<<4))>>(31-4)
[PASS2] visitLogicalOrExpression: (x&(1<<4))>>(31-4)
[PASS2] visitLogicalAndExpression: (x&(1<<4))>>(31-4)
[PASS2] visitInclusiveOrExpression: (x&(1<<4))>>(31-4)
[PASS2] visitExclusiveOrExpression: (x&(1<<4))>>(31-4)
[PASS2] visitAndExpression: (x&(1<<4))>>(31-4)
[PASS2] visitEqualityExpression: (x&(1<<4))>>(31-4)
[PASS2] visitRelationalExpression: (x&(1<<4))>>(31-4)
[PASS2] visitShiftExpression: (x&(1<<4))>>(31-4)
[PASS2] visitShiftExpression: (x&(1<<4))
[PASS2] visitAdditiveExpression: (x&(1<<4))
[PASS2] visitMultiplicativeExpression: (x&(1<<4))
[PASS2] visitUnaryExpression: (x&(1<<4))
[PASS2] visitPostfixExpression: (x&(1<<4))
[PASS2] visitPrimaryExpression: (x&(1<<4))
[PASS2] visitExpression: x&(1<<4)
[PASS2] visitAssignmentExpression: x&(1<<4)
[PASS2] visitConditionalExpression: x&(1<<4)
[PASS2] visitLogicalOrExpression: x&(1<<4)
[PASS2] visitLogicalAndExpression: x&(1<<4)
[PASS2] visitInclusiveOrExpression: x&(1<<4)
[PASS2] visitExclusiveOrExpression: x&(1<<4)
[PASS2] visitAndExpression: x&(1<<4)
[PASS2] visitAndExpression: x
[PASS2] visitEqualityExpression: x
[PASS2] visitRelationalExpression: x
[PASS2] visitShiftExpression: x
[PASS2] visitAdditiveExpression: x
[PASS2] visitMultiplicativeExpression: x
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitEqualityExpression: (1<<4)
[PASS2] visitRelationalExpression: (1<<4)
[PASS2] visitShiftExpression: (1<<4)
[PASS2] visitAdditiveExpression: (1<<4)
[PASS2] visitMultiplicativeExpression: (1<<4)
[PASS2] visitUnaryExpression: (1<<4)
[PASS2] visitPostfixExpression: (1<<4)
[PASS2] visitPrimaryExpression: (1<<4)
[PASS2] visitExpression: 1<<4
[PASS2] visitAssignmentExpression: 1<<4
[PASS2] visitConditionalExpression: 1<<4
[PASS2] visitLogicalOrExpression: 1<<4
[PASS2] visitLogicalAndExpression: 1<<4
[PASS2] visitInclusiveOrExpression: 1<<4
[PASS2] visitExclusiveOrExpression: 1<<4
[PASS2] visitAndExpression: 1<<4
[PASS2] visitEqualityExpression: 1<<4
[PASS2] visitRelationalExpression: 1<<4
[PASS2] visitShiftExpression: 1<<4
[PASS2] visitShiftExpression: 1
[PASS2] visitAdditiveExpression: 1
[PASS2] visitMultiplicativeExpression: 1
[PASS2] visitUnaryExpression: 1
[PASS2] visitPostfixExpression: 1
[PASS2] visitPrimaryExpression: 1
[PASS2] visitAdditiveExpression: 4
[PASS2] visitMultiplicativeExpression: 4
[PASS2] visitUnaryExpression: 4
[PASS2] visitPostfixExpression: 4
[PASS2] visitPrimaryExpression: 4
[PASS2] visitAdditiveExpression: (31-4)
[PASS2] visitMultiplicativeExpression: (31-4)
[PASS2] visitUnaryExpression: (31-4)
[PASS2] visitPostfixExpression: (31-4)
[PASS2] visitPrimaryExpression: (31-4)
[PASS2] visitExpression: 31-4
[PASS2] visitAssignmentExpression: 31-4
[PASS2] visitConditionalExpression: 31-4
[PASS2] visitLogicalOrExpression: 31-4
[PASS2] visitLogicalAndExpression: 31-4
[PASS2] visitInclusiveOrExpression: 31-4
[PASS2] visitExclusiveOrExpression: 31-4
[PASS2] visitAndExpression: 31-4
[PASS2] visitEqualityExpression: 31-4
[PASS2] visitRelationalExpression: 31-4
[PASS2] visitShiftExpression: 31-4
[PASS2] visitAdditiveExpression: 31-4
[PASS2] visitAdditiveExpression: 31
[PASS2] visitMultiplicativeExpression: 31
[PASS2] visitUnaryExpression: 31
[PASS2] visitPostfixExpression: 31
[PASS2] visitPrimaryExpression: 31
[PASS2] visitMultiplicativeExpression: 4
[PASS2] visitUnaryExpression: 4
[PASS2] visitPostfixExpression: 4
[PASS2] visitPrimaryExpression: 4
[PASS2] visitExclusiveOrExpression: ((x&(1<<5))>>(31-4))
[PASS2] visitAndExpression: ((x&(1<<5))>>(31-4))
[PASS2] visitEqualityExpression: ((x&(1<<5))>>(31-4))
[PASS2] visitRelationalExpression: ((x&(1<<5))>>(31-4))
[PASS2] visitShiftExpression: ((x&(1<<5))>>(31-4))
[PASS2] visitAdditiveExpression: ((x&(1<<5))>>(31-4))
[PASS2] visitMultiplicativeExpression: ((x&(1<<5))>>(31-4))
[PASS2] visitUnaryExpression: ((x&(1<<5))>>(31-4))
[PASS2] visitPostfixExpression: ((x&(1<<5))>>(31-4))
[PASS2] visitPrimaryExpression: ((x&(1<<5))>>(31-4))
[PASS2] visitExpression: (x&(1<<5))>>(31-4)
[PASS2] visitAssignmentExpression: (x&(1<<5))>>(31-4)
[PASS2] visitConditionalExpression: (x&(1<<5))>>(31-4)
[PASS2] visitLogicalOrExpression: (x&(1<<5))>>(31-4)
[PASS2] visitLogicalAndExpression: (x&(1<<5))>>(31-4)
[PASS2] visitInclusiveOrExpression: (x&(1<<5))>>(31-4)
[PASS2] visitExclusiveOrExpression: (x&(1<<5))>>(31-4)
[PASS2] visitAndExpression: (x&(1<<5))>>(31-4)
[PASS2] visitEqualityExpression: (x&(1<<5))>>(31-4)
[PASS2] visitRelationalExpression: (x&(1<<5))>>(31-4)
[PASS2] visitShiftExpression: (x&(1<<5))>>(31-4)
[PASS2] visitShiftExpression: (x&(1<<5))
[PASS2] visitAdditiveExpression: (x&(1<<5))
[PASS2] visitMultiplicativeExpression: (x&(1<<5))
[PASS2] visitUnaryExpression: (x&(1<<5))
[PASS2] visitPostfixExpression: (x&(1<<5))
[PASS2] visitPrimaryExpression: (x&(1<<5))
[PASS2] visitExpression: x&(1<<5)
[PASS2] visitAssignmentExpression: x&(1<<5)
[PASS2] visitConditionalExpression: x&(1<<5)
[PASS2] visitLogicalOrExpression: x&(1<<5)
[PASS2] visitLogicalAndExpression: x&(1<<5)
[PASS2] visitInclusiveOrExpression: x&(1<<5)
[PASS2] visitExclusiveOrExpression: x&(1<<5)
[PASS2] visitAndExpression: x&(1<<5)
[PASS2] visitAndExpression: x
[PASS2] visitEqualityExpression: x
[PASS2] visitRelationalExpression: x
[PASS2] visitShiftExpression: x
[PASS2] visitAdditiveExpression: x
[PASS2] visitMultiplicativeExpression: x
[PASS2] visitUnaryExpression: x
[PASS2] visitPostfixExpression: x
[PASS2] visitPrimaryExpression: x
[PASS2] visitEqualityExpression: (1<<5)
[PASS2] visitRelationalExpression: (1<<5)
[PASS2] visitShiftExpression: (1<<5)
[PASS2] visitAdditiveExpression: (1<<5)
[PASS2] visitMultiplicativeExpression: (1<<5)
[PASS2] visitUnaryExpression: (1<<5)
[PASS2] visitPostfixExpression: (1<<5)
[PASS2] visitPrimaryExpression: (1<<5)
[PASS2] visitExpression: 1<<5
[PASS2] visitAssignmentExpression: 1<<5
[PASS2] visitConditionalExpression: 1<<5
[PASS2] visitLogicalOrExpression: 1<<5
[PASS2] visitLogicalAndExpression: 1<<5
[PASS2] visitInclusiveOrExpression: 1<<5
[PASS2] visitExclusiveOrExpression: 1<<5
[PASS2] visitAndExpression: 1<<5
[PASS2] visitEqualityExpression: 1<<5
[PASS2] visitRelationalExpression: 1<<5
[PASS2] visitShiftExpression: 1<<5
[PASS2] visitShiftExpression: 1
[PASS2] visitAdditiveExpression: 1
[PASS2] visitMultiplicativeExpression: 1
[PASS2] visitUnaryExpression: 1
[PASS2] visitPostfixExpression: 1
[PASS2] visitPrimaryExpression: 1
[PASS2] visitAdditiveExpression: 5
[PASS2] visitMultiplicativeExpression: 5
[PASS2] visitUnaryExpression: 5
[PASS2] visitPostfixExpression: 5
[PASS2] visitPrimaryExpression: 5
[PASS2] visitAdditiveExpression: (31-4)
[PASS2] visitMultiplicativeExpression: (31-4)
[PASS2] visitUnaryExpression: (31-4)
[PASS2] visitPostfixExpression: (31-4)
[PASS2] visitPrimaryExpression: (31-4)
[PASS2] visitExpression: 31-4
[PASS2] visitAssignmentExpression: 31-4
[PASS2] visitConditionalExpression: 31-4
[PASS2] visitLogicalOrExpression: 31-4
[PASS2] visitLogicalAndExpression: 31-4
[PASS2] visitInclusiveOrExpression: 31-4
[PASS2] visitExclusiveOrExpression: 31-4
[PASS2] visitAndExpression: 31-4
[PASS2] visitEqualityExpression: 31-4
[PASS2] visitRelationalExpression: 31-4
[PASS2] visitShiftExpression: 31-4
[PASS2] visitAdditiveExpression: 31-4
[PASS2] visitAdditiveExpression: 31
[PASS2] visitMultiplicativeExpression: 31
[PASS2] visitUnaryExpression: 31
[PASS2] visitPostfixExpression: 31
[PASS2] visitPrimaryExpression: 31
[PASS2] visitMultiplicativeExpression: 4
[PASS2] visitUnaryExpression: 4
[PASS2] visitPostfixExpression: 4
[PASS2] visitPrimaryExpression: 4
[PASS2] visitAssignmentExpression: false
[PASS2] visitConditionalExpression: false
[PASS2] visitLogicalOrExpression: false
[PASS2] visitLogicalAndExpression: false
[PASS2] visitInclusiveOrExpression: false
[PASS2] visitExclusiveOrExpression: false
[PASS2] visitAndExpression: false
[PASS2] visitEqualityExpression: false
[PASS2] visitRelationalExpression: false
[PASS2] visitShiftExpression: false
[PASS2] visitAdditiveExpression: false
[PASS2] visitMultiplicativeExpression: false
[PASS2] visitUnaryExpression: false
[PASS2] visitPostfixExpression: false
[PASS2] visitPrimaryExpression: false
[PASS2] visitAssignmentExpression: true
[PASS2] visitConditionalExpression: true
[PASS2] visitLogicalOrExpression: true
[PASS2] visitLogicalAndExpression: true
[PASS2] visitInclusiveOrExpression: true
[PASS2] visitExclusiveOrExpression: true
[PASS2] visitAndExpression: true
[PASS2] visitEqualityExpression: true
[PASS2] visitRelationalExpression: true
[PASS2] visitShiftExpression: true
[PASS2] visitAdditiveExpression: true
[PASS2] visitMultiplicativeExpression: true
[PASS2] visitUnaryExpression: true
[PASS2] visitPostfixExpression: true
[PASS2] visitPrimaryExpression: true
[PASS2] visitAssignmentExpression: false
[PASS2] visitConditionalExpression: false
[PASS2] visitLogicalOrExpression: false
[PASS2] visitLogicalAndExpression: false
[PASS2] visitInclusiveOrExpression: false
[PASS2] visitExclusiveOrExpression: false
[PASS2] visitAndExpression: false
[PASS2] visitEqualityExpression: false
[PASS2] visitRelationalExpression: false
[PASS2] visitShiftExpression: false
[PASS2] visitAdditiveExpression: false
[PASS2] visitMultiplicativeExpression: false
[PASS2] visitUnaryExpression: false
[PASS2] visitPostfixExpression: false
[PASS2] visitPrimaryExpression: false
[PASS2] visitAssignmentExpression: true
[PASS2] visitConditionalExpression: true
[PASS2] visitLogicalOrExpression: true
[PASS2] visitLogicalAndExpression: true
[PASS2] visitInclusiveOrExpression: true
[PASS2] visitExclusiveOrExpression: true
[PASS2] visitAndExpression: true
[PASS2] visitEqualityExpression: true
[PASS2] visitRelationalExpression: true
[PASS2] visitShiftExpression: true
[PASS2] visitAdditiveExpression: true
[PASS2] visitMultiplicativeExpression: true
[PASS2] visitUnaryExpression: true
[PASS2] visitPostfixExpression: true
[PASS2] visitPrimaryExpression: true
[PASS2] visitAssignmentExpression: false
[PASS2] visitConditionalExpression: false
[PASS2] visitLogicalOrExpression: false
[PASS2] visitLogicalAndExpression: false
[PASS2] visitInclusiveOrExpression: false
[PASS2] visitExclusiveOrExpression: false
[PASS2] visitAndExpression: false
[PASS2] visitEqualityExpression: false
[PASS2] visitRelationalExpression: false
[PASS2] visitShiftExpression: false
[PASS2] visitAdditiveExpression: false
[PASS2] visitMultiplicativeExpression: false
[PASS2] visitUnaryExpression: false
[PASS2] visitPostfixExpression: false
[PASS2] visitPrimaryExpression: false
[PASS2] visitAssignmentExpression: true
[PASS2] visitConditionalExpression: true
[PASS2] visitLogicalOrExpression: true
[PASS2] visitLogicalAndExpression: true
[PASS2] visitInclusiveOrExpression: true
[PASS2] visitExclusiveOrExpression: true
[PASS2] visitAndExpression: true
[PASS2] visitEqualityExpression: true
[PASS2] visitRelationalExpression: true
[PASS2] visitShiftExpression: true
[PASS2] visitAdditiveExpression: true
[PASS2] visitMultiplicativeExpression: true
[PASS2] visitUnaryExpression: true
[PASS2] visitPostfixExpression: true
[PASS2] visitPrimaryExpression: true
[PASS2] visitStatement: if(a){}elseif(b){}elseif(c){}elseif(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS2] visitExpression: a
[PASS2] visitAssignmentExpression: a
[PASS2] visitConditionalExpression: a
[PASS2] visitLogicalOrExpression: a
[PASS2] visitLogicalAndExpression: a
[PASS2] visitInclusiveOrExpression: a
[PASS2] visitExclusiveOrExpression: a
[PASS2] visitAndExpression: a
[PASS2] visitEqualityExpression: a
[PASS2] visitRelationalExpression: a
[PASS2] visitShiftExpression: a
[PASS2] visitAdditiveExpression: a
[PASS2] visitMultiplicativeExpression: a
[PASS2] visitUnaryExpression: a
[PASS2] visitPostfixExpression: a
[PASS2] visitPrimaryExpression: a
[PASS2] visitStatement: {}
[PASS2] visitCompoundStatement: {}
[PASS2] visitStatement: if(b){}elseif(c){}elseif(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS2] visitExpression: b
[PASS2] visitAssignmentExpression: b
[PASS2] visitConditionalExpression: b
[PASS2] visitLogicalOrExpression: b
[PASS2] visitLogicalAndExpression: b
[PASS2] visitInclusiveOrExpression: b
[PASS2] visitExclusiveOrExpression: b
[PASS2] visitAndExpression: b
[PASS2] visitEqualityExpression: b
[PASS2] visitRelationalExpression: b
[PASS2] visitShiftExpression: b
[PASS2] visitAdditiveExpression: b
[PASS2] visitMultiplicativeExpression: b
[PASS2] visitUnaryExpression: b
[PASS2] visitPostfixExpression: b
[PASS2] visitPrimaryExpression: b
[PASS2] visitStatement: {}
[PASS2] visitCompoundStatement: {}
[PASS2] visitStatement: if(c){}elseif(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS2] visitExpression: c
[PASS2] visitAssignmentExpression: c
[PASS2] visitConditionalExpression: c
[PASS2] visitLogicalOrExpression: c
[PASS2] visitLogicalAndExpression: c
[PASS2] visitInclusiveOrExpression: c
[PASS2] visitExclusiveOrExpression: c
[PASS2] visitAndExpression: c
[PASS2] visitEqualityExpression: c
[PASS2] visitRelationalExpression: c
[PASS2] visitShiftExpression: c
[PASS2] visitAdditiveExpression: c
[PASS2] visitMultiplicativeExpression: c
[PASS2] visitUnaryExpression: c
[PASS2] visitPostfixExpression: c
[PASS2] visitPrimaryExpression: c
[PASS2] visitStatement: {}
[PASS2] visitCompoundStatement: {}
[PASS2] visitStatement: if(!d){}elseif(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS2] visitExpression: !d
[PASS2] visitAssignmentExpression: !d
[PASS2] visitConditionalExpression: !d
[PASS2] visitLogicalOrExpression: !d
[PASS2] visitLogicalAndExpression: !d
[PASS2] visitInclusiveOrExpression: !d
[PASS2] visitExclusiveOrExpression: !d
[PASS2] visitAndExpression: !d
[PASS2] visitEqualityExpression: !d
[PASS2] visitRelationalExpression: !d
[PASS2] visitShiftExpression: !d
[PASS2] visitAdditiveExpression: !d
[PASS2] visitMultiplicativeExpression: !d
[PASS2] visitUnaryExpression: !d
[PASS2] visitUnaryOperator: !
[PASS2] visitUnaryExpression: d
[PASS2] visitPostfixExpression: d
[PASS2] visitPrimaryExpression: d
[PASS2] visitStatement: {}
[PASS2] visitCompoundStatement: {}
[PASS2] visitStatement: if(e&&!f){}elseif(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS2] visitExpression: e&&!f
[PASS2] visitAssignmentExpression: e&&!f
[PASS2] visitConditionalExpression: e&&!f
[PASS2] visitLogicalOrExpression: e&&!f
[PASS2] visitLogicalAndExpression: e&&!f
[PASS2] visitLogicalAndExpression: e
[PASS2] visitInclusiveOrExpression: e
[PASS2] visitExclusiveOrExpression: e
[PASS2] visitAndExpression: e
[PASS2] visitEqualityExpression: e
[PASS2] visitRelationalExpression: e
[PASS2] visitShiftExpression: e
[PASS2] visitAdditiveExpression: e
[PASS2] visitMultiplicativeExpression: e
[PASS2] visitUnaryExpression: e
[PASS2] visitPostfixExpression: e
[PASS2] visitPrimaryExpression: e
[PASS2] visitInclusiveOrExpression: !f
[PASS2] visitExclusiveOrExpression: !f
[PASS2] visitAndExpression: !f
[PASS2] visitEqualityExpression: !f
[PASS2] visitRelationalExpression: !f
[PASS2] visitShiftExpression: !f
[PASS2] visitAdditiveExpression: !f
[PASS2] visitMultiplicativeExpression: !f
[PASS2] visitUnaryExpression: !f
[PASS2] visitUnaryOperator: !
[PASS2] visitUnaryExpression: f
[PASS2] visitPostfixExpression: f
[PASS2] visitPrimaryExpression: f
[PASS2] visitStatement: {}
[PASS2] visitCompoundStatement: {}
[PASS2] visitStatement: if(a||b||c||d||e||f){}elseif(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS2] visitExpression: a||b||c||d||e||f
[PASS2] visitAssignmentExpression: a||b||c||d||e||f
[PASS2] visitConditionalExpression: a||b||c||d||e||f
[PASS2] visitLogicalOrExpression: a||b||c||d||e||f
[PASS2] visitLogicalOrExpression: a||b||c||d||e
[PASS2] visitLogicalOrExpression: a||b||c||d
[PASS2] visitLogicalOrExpression: a||b||c
[PASS2] visitLogicalOrExpression: a||b
[PASS2] visitLogicalOrExpression: a
[PASS2] visitLogicalAndExpression: a
[PASS2] visitInclusiveOrExpression: a
[PASS2] visitExclusiveOrExpression: a
[PASS2] visitAndExpression: a
[PASS2] visitEqualityExpression: a
[PASS2] visitRelationalExpression: a
[PASS2] visitShiftExpression: a
[PASS2] visitAdditiveExpression: a
[PASS2] visitMultiplicativeExpression: a
[PASS2] visitUnaryExpression: a
[PASS2] visitPostfixExpression: a
[PASS2] visitPrimaryExpression: a
[PASS2] visitLogicalAndExpression: b
[PASS2] visitInclusiveOrExpression: b
[PASS2] visitExclusiveOrExpression: b
[PASS2] visitAndExpression: b
[PASS2] visitEqualityExpression: b
[PASS2] visitRelationalExpression: b
[PASS2] visitShiftExpression: b
[PASS2] visitAdditiveExpression: b
[PASS2] visitMultiplicativeExpression: b
[PASS2] visitUnaryExpression: b
[PASS2] visitPostfixExpression: b
[PASS2] visitPrimaryExpression: b
[PASS2] visitLogicalAndExpression: c
[PASS2] visitInclusiveOrExpression: c
[PASS2] visitExclusiveOrExpression: c
[PASS2] visitAndExpression: c
[PASS2] visitEqualityExpression: c
[PASS2] visitRelationalExpression: c
[PASS2] visitShiftExpression: c
[PASS2] visitAdditiveExpression: c
[PASS2] visitMultiplicativeExpression: c
[PASS2] visitUnaryExpression: c
[PASS2] visitPostfixExpression: c
[PASS2] visitPrimaryExpression: c
[PASS2] visitLogicalAndExpression: d
[PASS2] visitInclusiveOrExpression: d
[PASS2] visitExclusiveOrExpression: d
[PASS2] visitAndExpression: d
[PASS2] visitEqualityExpression: d
[PASS2] visitRelationalExpression: d
[PASS2] visitShiftExpression: d
[PASS2] visitAdditiveExpression: d
[PASS2] visitMultiplicativeExpression: d
[PASS2] visitUnaryExpression: d
[PASS2] visitPostfixExpression: d
[PASS2] visitPrimaryExpression: d
[PASS2] visitLogicalAndExpression: e
[PASS2] visitInclusiveOrExpression: e
[PASS2] visitExclusiveOrExpression: e
[PASS2] visitAndExpression: e
[PASS2] visitEqualityExpression: e
[PASS2] visitRelationalExpression: e
[PASS2] visitShiftExpression: e
[PASS2] visitAdditiveExpression: e
[PASS2] visitMultiplicativeExpression: e
[PASS2] visitUnaryExpression: e
[PASS2] visitPostfixExpression: e
[PASS2] visitPrimaryExpression: e
[PASS2] visitLogicalAndExpression: f
[PASS2] visitInclusiveOrExpression: f
[PASS2] visitExclusiveOrExpression: f
[PASS2] visitAndExpression: f
[PASS2] visitEqualityExpression: f
[PASS2] visitRelationalExpression: f
[PASS2] visitShiftExpression: f
[PASS2] visitAdditiveExpression: f
[PASS2] visitMultiplicativeExpression: f
[PASS2] visitUnaryExpression: f
[PASS2] visitPostfixExpression: f
[PASS2] visitPrimaryExpression: f
[PASS2] visitStatement: {}
[PASS2] visitCompoundStatement: {}
[PASS2] visitStatement: if(a&&b&&c&&d&&e&&f){}elseif(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS2] visitExpression: a&&b&&c&&d&&e&&f
[PASS2] visitAssignmentExpression: a&&b&&c&&d&&e&&f
[PASS2] visitConditionalExpression: a&&b&&c&&d&&e&&f
[PASS2] visitLogicalOrExpression: a&&b&&c&&d&&e&&f
[PASS2] visitLogicalAndExpression: a&&b&&c&&d&&e&&f
[PASS2] visitLogicalAndExpression: a&&b&&c&&d&&e
[PASS2] visitLogicalAndExpression: a&&b&&c&&d
[PASS2] visitLogicalAndExpression: a&&b&&c
[PASS2] visitLogicalAndExpression: a&&b
[PASS2] visitLogicalAndExpression: a
[PASS2] visitInclusiveOrExpression: a
[PASS2] visitExclusiveOrExpression: a
[PASS2] visitAndExpression: a
[PASS2] visitEqualityExpression: a
[PASS2] visitRelationalExpression: a
[PASS2] visitShiftExpression: a
[PASS2] visitAdditiveExpression: a
[PASS2] visitMultiplicativeExpression: a
[PASS2] visitUnaryExpression: a
[PASS2] visitPostfixExpression: a
[PASS2] visitPrimaryExpression: a
[PASS2] visitInclusiveOrExpression: b
[PASS2] visitExclusiveOrExpression: b
[PASS2] visitAndExpression: b
[PASS2] visitEqualityExpression: b
[PASS2] visitRelationalExpression: b
[PASS2] visitShiftExpression: b
[PASS2] visitAdditiveExpression: b
[PASS2] visitMultiplicativeExpression: b
[PASS2] visitUnaryExpression: b
[PASS2] visitPostfixExpression: b
[PASS2] visitPrimaryExpression: b
[PASS2] visitInclusiveOrExpression: c
[PASS2] visitExclusiveOrExpression: c
[PASS2] visitAndExpression: c
[PASS2] visitEqualityExpression: c
[PASS2] visitRelationalExpression: c
[PASS2] visitShiftExpression: c
[PASS2] visitAdditiveExpression: c
[PASS2] visitMultiplicativeExpression: c
[PASS2] visitUnaryExpression: c
[PASS2] visitPostfixExpression: c
[PASS2] visitPrimaryExpression: c
[PASS2] visitInclusiveOrExpression: d
[PASS2] visitExclusiveOrExpression: d
[PASS2] visitAndExpression: d
[PASS2] visitEqualityExpression: d
[PASS2] visitRelationalExpression: d
[PASS2] visitShiftExpression: d
[PASS2] visitAdditiveExpression: d
[PASS2] visitMultiplicativeExpression: d
[PASS2] visitUnaryExpression: d
[PASS2] visitPostfixExpression: d
[PASS2] visitPrimaryExpression: d
[PASS2] visitInclusiveOrExpression: e
[PASS2] visitExclusiveOrExpression: e
[PASS2] visitAndExpression: e
[PASS2] visitEqualityExpression: e
[PASS2] visitRelationalExpression: e
[PASS2] visitShiftExpression: e
[PASS2] visitAdditiveExpression: e
[PASS2] visitMultiplicativeExpression: e
[PASS2] visitUnaryExpression: e
[PASS2] visitPostfixExpression: e
[PASS2] visitPrimaryExpression: e
[PASS2] visitInclusiveOrExpression: f
[PASS2] visitExclusiveOrExpression: f
[PASS2] visitAndExpression: f
[PASS2] visitEqualityExpression: f
[PASS2] visitRelationalExpression: f
[PASS2] visitShiftExpression: f
[PASS2] visitAdditiveExpression: f
[PASS2] visitMultiplicativeExpression: f
[PASS2] visitUnaryExpression: f
[PASS2] visitPostfixExpression: f
[PASS2] visitPrimaryExpression: f
[PASS2] visitStatement: {}
[PASS2] visitCompoundStatement: {}
[PASS2] visitStatement: if(aisb){}elseif(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS2] visitExpression: aisb
[PASS2] visitAssignmentExpression: aisb
[PASS2] visitConditionalExpression: aisb
[PASS2] visitLogicalOrExpression: aisb
[PASS2] visitLogicalAndExpression: aisb
[PASS2] visitInclusiveOrExpression: aisb
[PASS2] visitExclusiveOrExpression: aisb
[PASS2] visitAndExpression: aisb
[PASS2] visitEqualityExpression: aisb
[PASS2] visitEqualityExpression: a
[PASS2] visitRelationalExpression: a
[PASS2] visitShiftExpression: a
[PASS2] visitAdditiveExpression: a
[PASS2] visitMultiplicativeExpression: a
[PASS2] visitUnaryExpression: a
[PASS2] visitPostfixExpression: a
[PASS2] visitPrimaryExpression: a
[PASS2] visitRelationalExpression: b
[PASS2] visitShiftExpression: b
[PASS2] visitAdditiveExpression: b
[PASS2] visitMultiplicativeExpression: b
[PASS2] visitUnaryExpression: b
[PASS2] visitPostfixExpression: b
[PASS2] visitPrimaryExpression: b
[PASS2] visitStatement: {}
[PASS2] visitCompoundStatement: {}
[PASS2] visitStatement: if(cis notd){}elseif(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS2] visitExpression: cis notd
[PASS2] visitAssignmentExpression: cis notd
[PASS2] visitConditionalExpression: cis notd
[PASS2] visitLogicalOrExpression: cis notd
[PASS2] visitLogicalAndExpression: cis notd
[PASS2] visitInclusiveOrExpression: cis notd
[PASS2] visitExclusiveOrExpression: cis notd
[PASS2] visitAndExpression: cis notd
[PASS2] visitEqualityExpression: cis notd
[PASS2] visitEqualityExpression: c
[PASS2] visitRelationalExpression: c
[PASS2] visitShiftExpression: c
[PASS2] visitAdditiveExpression: c
[PASS2] visitMultiplicativeExpression: c
[PASS2] visitUnaryExpression: c
[PASS2] visitPostfixExpression: c
[PASS2] visitPrimaryExpression: c
[PASS2] visitRelationalExpression: d
[PASS2] visitShiftExpression: d
[PASS2] visitAdditiveExpression: d
[PASS2] visitMultiplicativeExpression: d
[PASS2] visitUnaryExpression: d
[PASS2] visitPostfixExpression: d
[PASS2] visitPrimaryExpression: d
[PASS2] visitStatement: {}
[PASS2] visitCompoundStatement: {}
[PASS2] visitStatement: if(a==b){}elseif(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS2] visitExpression: a==b
[PASS2] visitAssignmentExpression: a==b
[PASS2] visitConditionalExpression: a==b
[PASS2] visitLogicalOrExpression: a==b
[PASS2] visitLogicalAndExpression: a==b
[PASS2] visitInclusiveOrExpression: a==b
[PASS2] visitExclusiveOrExpression: a==b
[PASS2] visitAndExpression: a==b
[PASS2] visitEqualityExpression: a==b
[PASS2] visitEqualityExpression: a
[PASS2] visitRelationalExpression: a
[PASS2] visitShiftExpression: a
[PASS2] visitAdditiveExpression: a
[PASS2] visitMultiplicativeExpression: a
[PASS2] visitUnaryExpression: a
[PASS2] visitPostfixExpression: a
[PASS2] visitPrimaryExpression: a
[PASS2] visitRelationalExpression: b
[PASS2] visitShiftExpression: b
[PASS2] visitAdditiveExpression: b
[PASS2] visitMultiplicativeExpression: b
[PASS2] visitUnaryExpression: b
[PASS2] visitPostfixExpression: b
[PASS2] visitPrimaryExpression: b
[PASS2] visitStatement: {}
[PASS2] visitCompoundStatement: {}
[PASS2] visitStatement: if(c!=d){}elseif(aandb){}elseif(cord){}else{}
[PASS2] visitExpression: c!=d
[PASS2] visitAssignmentExpression: c!=d
[PASS2] visitConditionalExpression: c!=d
[PASS2] visitLogicalOrExpression: c!=d
[PASS2] visitLogicalAndExpression: c!=d
[PASS2] visitInclusiveOrExpression: c!=d
[PASS2] visitExclusiveOrExpression: c!=d
[PASS2] visitAndExpression: c!=d
[PASS2] visitEqualityExpression: c!=d
[PASS2] visitEqualityExpression: c
[PASS2] visitRelationalExpression: c
[PASS2] visitShiftExpression: c
[PASS2] visitAdditiveExpression: c
[PASS2] visitMultiplicativeExpression: c
[PASS2] visitUnaryExpression: c
[PASS2] visitPostfixExpression: c
[PASS2] visitPrimaryExpression: c
[PASS2] visitRelationalExpression: d
[PASS2] visitShiftExpression: d
[PASS2] visitAdditiveExpression: d
[PASS2] visitMultiplicativeExpression: d
[PASS2] visitUnaryExpression: d
[PASS2] visitPostfixExpression: d
[PASS2] visitPrimaryExpression: d
[PASS2] visitStatement: {}
[PASS2] visitCompoundStatement: {}
[PASS2] visitStatement: if(aandb){}elseif(cord){}else{}
[PASS2] visitExpression: aandb
[PASS2] visitAssignmentExpression: aandb
[PASS2] visitConditionalExpression: aandb
[PASS2] visitLogicalOrExpression: aandb
[PASS2] visitLogicalAndExpression: aandb
[PASS2] visitLogicalAndExpression: a
[PASS2] visitInclusiveOrExpression: a
[PASS2] visitExclusiveOrExpression: a
[PASS2] visitAndExpression: a
[PASS2] visitEqualityExpression: a
[PASS2] visitRelationalExpression: a
[PASS2] visitShiftExpression: a
[PASS2] visitAdditiveExpression: a
[PASS2] visitMultiplicativeExpression: a
[PASS2] visitUnaryExpression: a
[PASS2] visitPostfixExpression: a
[PASS2] visitPrimaryExpression: a
[PASS2] visitInclusiveOrExpression: b
[PASS2] visitExclusiveOrExpression: b
[PASS2] visitAndExpression: b
[PASS2] visitEqualityExpression: b
[PASS2] visitRelationalExpression: b
[PASS2] visitShiftExpression: b
[PASS2] visitAdditiveExpression: b
[PASS2] visitMultiplicativeExpression: b
[PASS2] visitUnaryExpression: b
[PASS2] visitPostfixExpression: b
[PASS2] visitPrimaryExpression: b
[PASS2] visitStatement: {}
[PASS2] visitCompoundStatement: {}
[PASS2] visitStatement: if(cord){}else{}
[PASS2] visitExpression: cord
[PASS2] visitAssignmentExpression: cord
[PASS2] visitConditionalExpression: cord
[PASS2] visitLogicalOrExpression: cord
[PASS2] visitLogicalOrExpression: c
[PASS2] visitLogicalAndExpression: c
[PASS2] visitInclusiveOrExpression: c
[PASS2] visitExclusiveOrExpression: c
[PASS2] visitAndExpression: c
[PASS2] visitEqualityExpression: c
[PASS2] visitRelationalExpression: c
[PASS2] visitShiftExpression: c
[PASS2] visitAdditiveExpression: c
[PASS2] visitMultiplicativeExpression: c
[PASS2] visitUnaryExpression: c
[PASS2] visitPostfixExpression: c
[PASS2] visitPrimaryExpression: c
[PASS2] visitLogicalAndExpression: d
[PASS2] visitInclusiveOrExpression: d
[PASS2] visitExclusiveOrExpression: d
[PASS2] visitAndExpression: d
[PASS2] visitEqualityExpression: d
[PASS2] visitRelationalExpression: d
[PASS2] visitShiftExpression: d
[PASS2] visitAdditiveExpression: d
[PASS2] visitMultiplicativeExpression: d
[PASS2] visitUnaryExpression: d
[PASS2] visitPostfixExpression: d
[PASS2] visitPrimaryExpression: d
[PASS2] visitStatement: {}
[PASS2] visitCompoundStatement: {}
[PASS2] visitStatement: {}
[PASS2] visitCompoundStatement: {}
