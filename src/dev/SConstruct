import sys
import os
import SCons



#=======================================================#
#                       Options                         #
#=======================================================#

NO_BUILD = ARGUMENTS.get("nobuild", None)
COMPILE  = ARGUMENTS.get("compile", None)
EXECUTE  = ARGUMENTS.get("execute", None)
SCRIPT   = ARGUMENTS.get("script" , None)

#=======================================================#
#                       Functions                       #
#=======================================================#

def scons_raise_exception(message):
    print("-" * 100)
    print(message)
    print("-" * 100)
    Exit(1)

#=======================================================#
#             Project Directories and Files             #
#=======================================================#

SOURCE_DIRECTORIES = [
    ".",
    "frontend",
    "intermediate",
    "backend",
]

SOURCE_DIRECTORIES = [Dir(dir) for dir in SOURCE_DIRECTORIES]

SOURCE_FILES = Flatten([dir.glob("*.cpp") for dir in SOURCE_DIRECTORIES])

#=======================================================#
#                   Main Environment                    #
#=======================================================#

env = Environment(
    tools    = ["mingw", "g++"],
    ENV      = os.environ,
    LIBS     = ["libstdc++"],
    CPPPATH  = SOURCE_DIRECTORIES,
    CXXFLAGS = [
        "-std=c++11",
        "-O3",
        "-Wall",
    ],
)

#=======================================================#
#                       Execution                       #
#=======================================================#

EXECUTABLE_NAME = "compiler"

# Determine which command to execute
if COMPILE is not None:
    COMMAND = "compile"
elif EXECUTE is not None:
    COMMAND = "execute"
else:
    COMMAND = None

# Build source files
if NO_BUILD is None:
    env.Program(
        target = EXECUTABLE_NAME,
        source = SOURCE_FILES
    )

# Execute the program
if COMMAND is not None:
    if SCRIPT is None:
        scons_raise_exception("Missing required argument : script\n" +
                              "This argument specifies which script to compile / execute")

    env.Command(
        target = "{}.out".format(EXECUTABLE_NAME),
        source = "{}.exe".format(EXECUTABLE_NAME),
        action = "{}.exe {} {}".format(EXECUTABLE_NAME, COMMAND, SCRIPT),
    )