/// STL Includes
#include <iostream>
#include <fstream>

/// ANTLR Includes
#include "antlr4-runtime.h"

/// Autogenerated Includes
#include "CLexer.h"
#include "CParser.h"
#include "CBaseListener.h"

/// ANLTR namespace
using namespace antlr4;



class Listener : public CBaseListener
{
public:

    void enterPrimaryExpression(CParser::PrimaryExpressionContext * ctx) override
    {

    }
};

/// MAIN
int main(int argc, const char* argv[])
{
    std::ifstream     stream(argv[1]);  ///< Open STDIN stream for input source file

    ANTLRInputStream  input(stream);    ///< ANTLR scanner / parser stream using above source file

    CLexer            lexer(&input);    ///< Lexer

    CommonTokenStream tokens(&lexer);   ///< Feed lexer into token stream
    
    CParser           parser(&tokens);  ///< Parser
    
    Listener          listener;         ///< IDK

    std::cout << "Tokens:" << std::endl;
    tokens.fill();
    for (auto & token : tokens.getTokens())
    {
        std::cout << token->getText() << std::endl;
    }

    return 0;
}
