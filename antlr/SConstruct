import sys
import os
import SCons

# Set up default environment path
DefaultEnvironment(
    ENV = { "PATH" : os.environ["PATH"] },
)

#=======================================================#
#                       Constants                       #
#=======================================================#

GENERATED_DIR        = "generated_antlr"
GRAMMAR_FILE_NAME    = "C"
GENERATED_STATIC_LIB = "generated_antlr"
BUILD_SCRIPT         = "build_parser.sh"

#=======================================================#
#                   Helper Functions                    #
#=======================================================#

def get_all_subdirectories(root_dir):
    """
    Traverses and saves all subdirectories into a list
    @param root_dir : Starting directory to traverse
    @returns        : List of all directories
    """
    return [dirs for root, dirs, files in os.walk(root_dir)]

#=======================================================#
#             Project Directories and Files             #
#=======================================================#

CPPPATH = Flatten(
    [
        GENERATED_DIR,
        "antlr4-runtime",
        get_all_subdirectories("antlr4-runtime"),
    ]
)

# Glob all source files from the source directories
SOURCE_FILES = [Dir(dir).glob("*.cpp") for dir in CPPPATH]

#=======================================================#
#                   Main Environment                    #
#=======================================================#

env = Environment(
    tools    = ["mingw", "g++"],
    ENV      = os.environ, #{ "PATH" : os.environ["PATH"] },
    LIBS     = ["libstdc++"],
    CPPPATH  = Flatten(CPPPATH),
    CXXFLAGS = [
        "-std=c++14",
        "-O3",
        # "-Wall",
        # "-Werror",
    ],
)

#=======================================================#
#                    Compile Sources                    #
#=======================================================#

autogenerate_antlr = env.Command(
    target = "autogenerate_antlr",
    source = [],
    action = env.Action(
        "bash {}".format(BUILD_SCRIPT),
        "Calling {} to autogenerate antlr code...".format(BUILD_SCRIPT),
    ),
)

generated_antlr = env.StaticLibrary(
    target   = GENERATED_STATIC_LIB,
    source   = [Dir(GENERATED_DIR).glob("*.cpp")],
    CXXFLAGS = env["CXXFLAGS"] + ["-w", "-fPIC"],            # Disable warnings, nothing we can do
)

Depends(generated_antlr, autogenerate_antlr)

# env.Program(
#     target = "compiler",
#     source = [
#         SOURCE_FILES,
#         autogenerate_antlr,
#     ],
#     LIBS = generated_antlr,
#     LIBPATH = "./",
# )
