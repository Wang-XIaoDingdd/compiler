import sys
import os
import SCons


def get_all_subdirectories(root_dir):
    """

    """
    return [dirs for root, dirs, files in os.walk(root_dir)]


GENERATED_DIR         = "generated_antlr"
GRAMMAR_FILE_NAME     = "C"
GENERATED_STATIC_LIB  = "generated_antlr.lib"
BUILD_SCRIPT          = "build_parser.sh"

# Update default environment path
DefaultEnvironment(
    ENV = { "PATH" : os.environ["PATH"] },
)

#=======================================================#
#             Project Directories and Files             #
#=======================================================#

CPPPATH = [
    GENERATED_DIR,
    "antlr4-runtime",
    # get_all_subdirectories("antlr4-runtime"),
]

# Glob all source files from the source directories
SOURCE_FILES = [Dir(dir).glob("*.cpp") for dir in CPPPATH]

#=======================================================#
#                   Main Environment                    #
#=======================================================#

env = Environment(
    tools    = ["mingw", "g++"],
    ENV      = { "PATH" : os.environ["PATH"] },
    LIBS     = ["libstdc++"],
    CPPPATH  = Flatten(CPPPATH),
    CXXFLAGS = [
        "-std=c++11",
        "-O3",
        "-Wall",
        "-Werror",
    ],
)

#=======================================================#
#                    Compile Sources                    #
#=======================================================#

autogenerate_antlr = env.Command(
    target = "autogenerate_antlr",
    source = [],
    action = env.Action(
        "bash {}".format(BUILD_SCRIPT),
        "Calling {} to autogenerate antlr code...".format(BUILD_SCRIPT),
    ),
)

# generated_antlr = env.StaticLibrary(
#     target = GENERATED_STATIC_LIB,
#     source = [Dir(GENERATED_DIR).glob("*.cpp"), autogenerate_antlr],
# )

# env.Program(
#     target = "compiler",
#     source = [
#         SOURCE_FILES,
#         autogenerate_antlr,
#     ],
#     LIBS = generated_antlr,
#     LIBPATH = "./",
# )
